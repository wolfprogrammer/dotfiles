/**
@mainpage PIC USB CDC-AM
@author Me and Myself

Prerequisites

In priciple you should obtain your own PID and VID for your device from the USB consortium (or more easily from Microchip) but for simple testing and development it is ok to use what I have in the code ie Vendor id = VID = 0x0408 and Product id = PID = 0x000A.
To use the library you need to have 'GNU autotools' and 'SDCC' installed and in your 'path'. You can of course compile the code without the autotools as there are just half a dozen files to compile. To program the firmware into the device you need the Microchip PICKit2 programmer and the 'pk2cmd' software that supports it on the 'path'. If you don't have the PICKit2 you realy should get one, at USD 35 it is a steal and it is supported on Linux, Windows and Mac OS X.
And naturally you need a PIC18F4550 device with 4 MHz xtal. It is also possible to use the other PIC18F series devices and crystals but some changes to the link and config options maybe necessary.


Testing on Linux

In Linux type ls /dev/ttyACM* to get a list of USB virtual serial ports and then use the built in screen terminal to talk to it.
For example:

@code
ls /dev/tty.ACM*
/dev/tty.ACM0
screen /dev/ttyACM0
@endcode


------------------------------------------------------
Testing on Windows

In Windows you need to install an .inf file that will associate your device with the built in driver.
To install the 'driver' plug in the device and go to the Device Manager. Look for an 'Unknown device' and select 'Properties' for that device, then select 'Install Driver', browse to the cdcacm.inf file which is included with the project files.

Note the file has not been tested after clean up so there maybe some errors.
Also note that if you change the PID/VID of the device (and in the long run you should) then you need to update the cdcacm.inf file and re-install it.
After succesfull installation the device should appear as a COM port and you can use a terminal emulator such as PuTTY or TeraTerm to talk to it.







*/
