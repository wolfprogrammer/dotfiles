/*
 * =====================================================================================
 *
 *       Filename:  default.h
 *
 *    Description:  Tipos de dados básicos para sistemas embarcados
 *
 *        Version:  1.0
 *        Created:  01/11/2011 05:49:41 AM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Caio Rodrigues 
 *        Company:  
 *
 * =====================================================================================
 */


/**
 *@file default.h
 *@brief Definições comuns de tipos de dados , tamanhos e operações de bits
 *
 *In this header file is defined the basic bit operations and the common data types 8 bit,16 bit ,32 
 *signed/unsigned integers.It can be used not only in pic mcus as 8051 and others microcontrollers.
 *
 *@author Caio Rodrigues Soares Silva
 *
 *
 *@warning It's still under development.Unstable.
 *@todo Improve the documentation.
 *
 */

/*! \mainpage Title of the main documentation page
 * 
 * Library's API:
 * \li interface1.h
 * \li interface2.h
 * \li ecc
 */

/**
 * Example function.
 * Dummy prototype to show some Doxygen keywords
 * 
 * Example usage:
 * \code
 *     some common pre-calling actions
 *     err_code = exm_function(&data);
 *     some common post-calling actions
 * \endcode
 * 
 * @warning A warning note
 * 
 * @param data The DATA structure to be filled
 * @see DATA
 * 
 * @return The exm_err error code
 */
exm_err exm_function(DATA* data);


/** 
 * Example error codes enum.
 * Error codes returned by an example module.
 * 	ALIASES = "pipeline{1}=\dot digraph G {rankdir=LR; node [shape=box, color=blue]; \1} \enddot"
 *  @pipeline{DTMF->DTMF_Detector}
 */
typedef enum {
   EXM_SUCCESS    =  0, /**< Success */ 
   EXM_ERR_ONE    = -1, /**< Error one */ 
   EXM_ERR_TWO    = -2, /**< Error two */ 
   EXM_ERR_THREE  = -3, /**< Error three */ 
} exm_err;

/**
 * @page tutorial_error_page Error Tutorial
 *
 * @section tutorial_error_introduction Introduction
 *
 * The Eina error module provides a way to manage errors in a simple
 * but powerful way in libraries and modules. It is also used in Eina
 * ...
 * Here is an example of use:
 *
 * @code
 * #include <stdlib.h>
 * #include <stdio.h>
 * @endcode
 * Of course, instead of printf(), eina_log_print() can be used to
 * have beautiful error messages.
 *  
 *  \f$ \sqrt{x^2 + y^2} \f$
 *
 * <img src="../pwm-flow.jpeg" alt="Screenshot">
 *
 */


#ifndef	_default_h_
#define _default_h_


/* Data types*/


/*!
 *	\var typedef unsigned char u8
 *	\brief 8 bit unsigned integer , range: 0 to 255
 */
typedef unsigned char u8;

/*!
 *	\var typedef signed char i8
 *	\brief 8 bit signed integer , range: -128 to 127
 */
typedef signed char i8;

typedef unsigned int u16;
typedef signed int i16;

typedef unsigned long u32;
typedef signed 	 long i32;

#define eeprom __code

/* Data types constants */

#define MSB_8 	 7	// MSB position
#define MSB_16	15
#define MSB_32	31

					// Max number for each data type
#define MAX_u8		255
#define	MAX_i8		127
#define MAX_u16		65535


/* Bolean constants*/

#define HIGH 1
#define LOW  0

#define TRUE  1
#define FALSE 0

#define ON	1
#define OFF 0


				/* Bit mask operations */

/**
	A function that set the nth's varible bit 
@param	var The variable that will be changed
@param bitno  The order of the bit that is desired to be seted
 
 
 */
#define bit_set(var,bitno)	((var)=1<<(bitno))

#define bit_clr(var,bitno)	(var)&=~(1<<(bitno))
#define bit_test(var,bitno)	((var)>>(bitno)&0x01)


#define bits_on(var,mask)	((var)|=(mask))
#define bits_off(var,mask) 	((var)&=~0^(mask))

#define lo_nibbles(x)	((x)&0x0F);
#define hi_nibbles(x)	((x)>>4);




#endif


