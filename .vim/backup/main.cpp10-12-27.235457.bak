#include <cstdlib>
#include <iostream>
#include <cstring>                  //required for string manipulation
#include <sstream>                  //required for converting int to string
#include <fstream>                  //required  for file i/o
#include <string>
#include <cctype>
#include <algorithm>

#define VERSION "1.1"
#define VERSION_DATE "05.05.2009"

#ifndef WIN32 
  #define stricmp strcasecmp 
  #define strnicmp strncasecmp 
#endif

using namespace std;

enum pack_types{DIL, QUAD, LINE};
pack_types type;

int pins=0;
const char *name=0;
string libname, modname;
int max_name_strlen=4;
int start;
int d, num_type;
bool auto_types=false;
bool quiet=false;

int match(const char *find, int argc, char *argv[]){
    for(int i=0; i<argc; i++){
        if (!stricmp(find, argv[i])){
            return i;
        }
        if(!stricmp("--name", argv[i])) i++;
        if(!stricmp("--type", argv[i])) i++;
    }
    return 0;
}

void draw_pin(ofstream &file, int pin_no, int x, int y, const char dir, const string name, const char type, string shape){
    file << "X ";
    file << name << " ";
    file << pin_no << " " << x << " " << y << " ";
    file << d << " ";
    file << dir << " 50 50 1 1 " << type << " ";
    int i=0;
    while(shape[i]){
        file << shape[i++] << " ";
    }
    file << endl;
}

int main(int argc, char *argv[])
{
    int width, height;
    start=1;
    int at;
    if(!quiet) cout << endl;
    if (match("--help", argc, argv)){
        cout 
            << "Kicad Schematic Library maker" << endl
						<< "Version: " << VERSION << " - (" << VERSION_DATE  << ")" << endl << endl
						<< "usage: kicadlibwiz <options> <pin_number> pin_name <pin_number> pin_name..." << endl << endl
            << "options:" << endl
            << "--name name_of_the_device   default: output" << endl
            << "--type (DIL|QUAD|LINE)  default: DIL" << endl
            << "--quiet" << endl
            << "--auto_pin_type" << endl <<endl
            << "examples:" << endl
            << "kicadlibwiz pin1 pin2 pin3 pin4 pin5 pin6" << endl
            << "kicadlibwiz --name my_simple_device --type QUAD pin1 pin2 pin3 pin4 pin5 pin6 pin7 pin8" << endl
            << "kicadlibwiz 3 pin3 2 pin2 1 pin1 4 pin4 5 pin5 6 pin6" << endl;

		
			printf("\n\nUSAGE:some complex example:\n \
how to make ARM7 - at91sam7s256? well, download datasheet, open it on page with pinout.try to copy it somehow. paste it somewhere and make from it one line <; \
ready commad will look like: \n\nkicadlibwiz --name AT91SAM7S256 --type QUAD --auto_pin_type 1 ADVREF 17 GND 33 TDI 49 TDO 2 GND 18 VDDIO 34 PA6/PGMNOE 50 JTAGSEL 3 AD4 19 PA16/PGMD4 35 PA5/PGMRDY 51 TMS 4 AD5 20 PA15/PGMD3 36 PA4/PGMNCMD 52 PA31 5 AD6 21 PA14/PGMD2 37 PA27/PGMD15 53 TCK 6 AD7 22 PA13/PGMD1 38 PA28 54 VDDCORE 7 VDDIN 23 PA24/PGMD12 39 NRST 55 ERASE 8 VDDOUT 24 VDDCORE 40 TST 56 DDM 9 PA17/PGMD5/AD0 25 PA25/PGMD13 41 PA29 57 DDP 10 PA18/PGMD6/AD1 26 PA26/PGMD14 42 PA30 58 VDDIO 11 PA21/PGMD9 27 PA12/PGMD0 43 PA3 59 VDDFLASH 12 VDDCORE 28 PA11/PGMM3 44 PA2/PGMEN2 60 GND 13 PA19/PGMD7/AD2 29 PA10/PGMM2 45 VDDIO 61 XOUT 14 PA22/PGMD10 30 PA9/PGMM1 46 GND 62 XIN/PGMCK 15 PA23/PGMD11 31 PA8/PGMM0 47 PA1/PGMEN1 63 PLLRC 16 PA20/PGMD8/AD3 32 PA7/PGMNVALID 48 PA0/PGMEN0 64 VDDPLL ");
            
    }
    else{
        auto_types=match("--auto_pin_type", argc, argv);
				quiet=match("--quiet", argc, argv);
        if(auto_types) start++;
				if(quiet) start++;
        if (at=match("--name", argc, argv)){
            name=argv[at+1];
            start+=2;
        }
        else name="output";
        if (at=match("--type", argc, argv)){
            start+=2;
            if (!(stricmp(argv[at+1], "DIL"))){
                type=DIL;
            }
            else
             if (!(stricmp(argv[at+1], "QUAD"))){
                type=QUAD;
            }
            else
             if (!(stricmp(argv[at+1], "LINE"))){
                type=LINE;
            }
            else{
                type=DIL;
                cout << "Warning: unknown --type. setting DIL as default" << endl;
            }
        }
bool index=false;
        if (start<argc){
             pins=(argc-start);
             if(atoi(argv[start])){
                    pins=(argc-start)/2;
                    index=true;
                    if(2*pins!=argc-start){
                        cout << "Not all pins declared.." << endl;
                        return 1;
                    }
            }
        }
        else{
            cout << "no pins declared... use --help to get options" << endl;
            return 1;
        }
        
        if(!quiet) cout << "Pins: " << pins << endl;
        
        d=pins>99?400:(pins>9?350:300);

        if(start)
            for(int i=start; i<argc; i++)
                if(strlen(argv[i])>max_name_strlen)
                    max_name_strlen=strlen(argv[i]);
                    
        switch (type){
            case QUAD:
                width=2*(max_name_strlen+2)*50+pins*100/4;
                height=2*(max_name_strlen+2)*50+pins*100/4;
                break;
                
            case DIL:
                width=2*(max_name_strlen+2)*50+60;
                height=pins*100/2;
                break;
                
            case LINE:
                width=pins*100;
                height=(max_name_strlen+2)*50;
                break;
        }
        int rest;
        if(rest=width%200){
            width+=200-rest;
        }
        if(rest=height%200){
            height+=200-rest;
        }
        libname=name+string(".lib");
				if(!quiet) cout << "Saving library to: " << libname << endl;
        ofstream outfile;
        outfile.open(libname.c_str());
        outfile
        << "EESchema-LIBRARY Version 2.3  Date: 28/4/2008-08:57:06" << endl
        << "#" << endl
        << "#" << name << endl
        << "#" << endl
        << "DEF " << name << " U 0 40 Y Y 1 F N" << endl;

        if(type==LINE)
            outfile << "F0 \"U\" "<<width/2+120<< " " << 0 << " 60 H V C C" << endl;
        else
            outfile << "F0 \"U\" "<<-width/2+60<< " " << width/2+60 << " 60 H V C C" << endl;
        
        if(type==DIL)
            outfile << "F1 \"" << name << "\" 0 0 60 V V C C" << endl;
        if(type==QUAD)
            outfile << "F1 \"" << name << "\" 0 0 60 H V C C" << endl;    
        if(type==LINE)
            outfile << "F1 \"" << name << "\" 0 " << height/2+60 <<  " 60 H V C C" << endl;

        outfile << "DRAW" << endl;
        outfile << "S -" << width/2 << " -" << height/2<< " " << width/2 << " " << height/2 << " 0 1 0 N" << endl;
        
        char pin_type;
        string pin_name, pin_shape, pnu;
        int pin_at=d+width/2;
        char i_string[5];
				stringstream i_temp;
        for(int i=1; i<=pins; i++){
            if(auto_types)
                pin_type='U';
            else
                pin_type='P';    
            pin_shape=" ";
            if (index){
								i_temp << i;
								i_temp >> i_string;
                if(at=match(i_string, argc, argv)){
                    pin_name=argv[at+1];
                }
                else{
                    cout << "Cannot find pin number: " << i << endl
                        << "Aborting..." << endl;
                        return 1; 
                }
            }
            else pin_name=argv[start+i-1];
            
            if(auto_types){             
                pnu=pin_name;
                transform(pnu.begin(), pnu.end(), pnu.begin(), ::toupper);
                 /*im still looking for best way to do auto recognize pin type*/
                /*for example if it pin_name==GND then it should be powe in*/
                
                if(pnu=="GND" || pnu=="VCC" || pnu=="VDD" || pnu=="VDDFLASH" ||
                pnu=="VSS" || pnu=="AGND" || pnu=="DGND" ||
                pnu=="VREF" || pnu=="ADVREF" || pnu=="VDDIN" ||
                pnu=="VDDCORE" || pnu=="VDDIO" || pnu=="VDDPLL")
                    pin_type='W';
                    
                if(pnu=="VDDOUT")
                    pin_type='w';
                    
                if(pnu=="PLLRC")
                    pin_type='P';
                
                if(pnu=="DDM" | pnu=="DDP")
                    pin_type='B';
                    
               
            }
            if (type==DIL){
                    if(i<=pins/2)
                        draw_pin(outfile, i, -pin_at, 100*pins/4-100*i+50, 'R', pin_name, pin_type, pin_shape);
                    else
                        draw_pin(outfile, i, pin_at, -100*pins/4+100*(i-pins/2)-50, 'L', pin_name, pin_type, pin_shape);
                
            }
            if (type==QUAD){
                    if(i<=pins/4)
                        draw_pin(outfile, i, -pin_at, 100*pins/8-100*i+50, 'R', pin_name, pin_type, pin_shape);
                    else
                    if(i<=pins/2)
                        draw_pin(outfile, i, -100*pins/8+100*(i-pins/4)-50, -pin_at, 'U', pin_name, pin_type, pin_shape);
                    else
                    if(i<=pins*3/4)
                        draw_pin(outfile, i, pin_at, -100*pins/8+100*(i-pins/2)-50, 'L', pin_name, pin_type, pin_shape);
                    else
                        draw_pin(outfile, i, 100*pins/8-100*(i-pins*3/4)+50, pin_at, 'D', pin_name, pin_type, pin_shape);
            }
            if(type==LINE){        
                draw_pin(outfile, i, -100*pins/2+100*i-50, -height/2-d, 'U', pin_name, pin_type, pin_shape);
            }
        }

        outfile << "ENDDRAW" << endl
        << "ENDDEF" << endl
        << "#" << endl
        << "#End Library" << endl;
        outfile.close();
    }
    return EXIT_SUCCESS;
}
