
/*
 * =====================================================================================
 *
 *       Filename:  lcd.h
 *
 *    Description:  Modulo de interface LCD
 *
 *        Version:  1.0
 *        Created:  08/26/2012 02:55:43 PM
 *       Revision:  none
 *       Compiler:  sdcc
 *
 *         Author:  Caio Rodrigues 
 *        Company:  
 *
 * =====================================================================================
 */


#ifndef __lcd_h__
#define __lcd_h__

#include "default.h"


#ifndef  LCD4BIT
#define  LCD4BIT
#endif



 	/////////////////////////////////////////////
	//               LCD SETTINGS              //
	/////////////////////////////////////////////

#define LCD_SET_8BITS_1LINE_5X7DOTS  0X30
#define LCD_SET_8BITS_2LINE_5X7DOTS  0X38

#define SET_4BITS_1LINE_5X7DOTS  0X20 
#define SET_4BITS_1LINE_5X7DOTS  0X28

#define ENTRY_MODE_SET 			0X06
#define DISPLAY_OFF_CURSOR_OFF  	0X08
#define DISPLAY_ON_CURSOR_ON  		0x0E
#define DISPLAY_ON_CURSOR_BLINKING   	0X0F

#define  CLEAR_DISPLAY			0x01
#define  RETURN_HOME			0x20

#define  SHIFT_ENTIRE_DISPLAY_LEFT  	0X18
#define  SHIFT_ENTIRE_DISPLAY_RIGHT  	0X1C

//        SET DDRAM ADRESS
#define  lcd_pos(x)   lcd_cmd((x)+0x80)
#define  lcd_line1()  lcd_cmd(0x80)
#define  lcd_line2()  lcd_cmd(0x80+0x40)


 	/////////////////////////////////////////////
	//              LCD 4 BIT MODE             //
	/////////////////////////////////////////////


#ifdef  LCD4BIT

#define   LCD_D7  LATD7
#define   LCD_D6  LATD6
#define   LCD_D5  LATD5
#define   LCD_D4  LATD4

#define   LCD_E   LATD3
#define   LCD_RS  LATD2
#define   LCD_BUS LATD
#define   LCD_IO  TRISD
#define   LCD_STROBE();  LCD_E=1; LCD_E=0;

#define LCDconf  0x02
#define LCDMASK  0xF0   // Nibbles superiores




u8 teste;

void delay20ms(){
        u16  cont;
	for(cont=20000;cont;cont--);

}

void delayms(u16 cont){
	for(cont=20000;cont;cont--);

}

void delay1ms(){
        u16  cont;   
	for(cont=1000;cont;cont--);
}


void delay(u8 cont){
        for(cont;cont;cont--);
}

void lcd_cmd(u8 cmd){

	LCD_RS=0;
	//  Envia os primeiros 4bits altos de cmd
	LCD_BUS= (cmd | 0X0F ) & LCD_BUS;
        LCD_STROBE();

	delay1ms();

        // Envia os 4bits baixos de cmd
	LCD_BUS= (cmd<<4 ) | 0x0F & LCD_BUS;
	LCD_STROBE();
	
	delay1ms();
        
}

void lcd_char(char cmd){

	LCD_RS=1;

	LCD_BUS= 0X0F & LCD_BUS; // Limpa os nibles superiores
	
	//  Envia os primeiros 4bits altos de cmd
	LCD_BUS= (cmd & 0xF0 ) | LCD_BUS;
	LCD_STROBE();

        //delay1ms();
        delay(150);

	
	// Envia os 4bits baixos de cmd
	LCD_BUS= 0X0F & LCD_BUS; // Limpa os nibles superiores
	LCD_BUS= (cmd<<4 ) | LCD_BUS;
	LCD_STROBE();
	
	delay(150);
        //delay1ms();
//  delay20ms();

}
 

void LCD_init(){



	LCD_BUS=0;
	delay20ms();

	LCD_IO=LCDconf;

	LCD_BUS=0X30;   // 8 bit mode ON, 1 line, 5*8 font
        LCD_STROBE();
	delay20ms();
 
	LCD_BUS=0X30;   // 8 bit mode ON, 1 line, 5*8 font
        LCD_STROBE();
	delay20ms();
 
	LCD_BUS=0X30;   // 8 bit mode ON, 1 line, 5*8 font
        LCD_STROBE();
	delay20ms();
 

        LCD_BUS=0X20;    // Function set commmmmand : 4 bit mode ON, 1 line, 5*8 font
        LCD_STROBE();
	delay20ms();
     
 	lcd_cmd(0x28);
	lcd_cmd(0x08);
	lcd_cmd(0x01);     // Clear display
	lcd_cmd(0x06);
	lcd_cmd(0x0C);
	lcd_cmd(0x0F);

	delay20ms();
	delay20ms();
         

	
}


// Imprime caracter no LCD
void lcd_print(char * msg ){

		while(*msg) {
			  lcd_char(*msg); 	      // Só saí do loop quando *msg=0
					      // quando encontra caracter nulo
			  msg++;              // Vaí ao próximo caracter
		}
} // end of prints
  
#endif




#endif



                             













