%%HP: T(3)A(R)F(.);
DIR
 

 PLSQ
  \<< (0.,0.) PPAR 2.
GET C\->R SWAP DROP DUP
SQUIG ACOS 180. SWAP
- TAN / SWAP R\->C LINE
  \>>


  KLOC
(-2.55,2.60152035609)
  CLOSE 5000.
  SQUIG .7
  DAMP
  \<< 5000. 'CLOSE' STO
0. SQUIG ACOS 180.
SWAP - TAN B AL\->L DUP
SIZE KT STLZ AL\->L DUP
SIZE \-> SRAN ERAN TSTP
ANGLE BL BN TL TN
    \<< SRAN 20. * ERAN
20. *
      FOR i i NEG 20.
/ DUP ANGLE * R\->C
'TSTP' STO 0. 1. BN
        FOR j BL j
GET TSTP BN j - ^ * +
        NEXT 0. 1. TN
        FOR j TL j
GET TSTP TN j - ^ * +
        NEXT / NEG
DUP
        IF IM ABS .1
<
        THEN DUP
          IF ABS
CLOSE ABS <
          THEN
'CLOSE' STO TSTP
'KLOC' STO
          ELSE DROP
          END
        ELSE DROP
        END
      NEXT
      IF CLOSE ABS
5000. ==
      THEN
"COULDN'T FIND"
      ELSE "K=" CLOSE
ABS + "
AT " + KLOC +
      END
    \>>
  \>>
  ABOUTrlocus
  \<< ERASE PICT { # Dh
# 2h } TITLE 2. \->GROB
GXOR VERsionRL 1.
\->GROB VERsionRL 2.
\->GROB \-> ver ver2
    \<< 1. 2. { # 0h
# 0h } PVIEW
      FOR i 1. 10.
        FOR t PICT
# 2Dh t 3. * 20. +
R\->B 2. \->LIST ver GXOR
1. 40.
          START
          NEXT PICT
# 2Dh t 3. * 20. +
R\->B 2. \->LIST ver GXOR
        NEXT PICT {
# 1Fh # 1Eh } ver2
GXOR 1. 500.
        START
        NEXT PICT {
# 1Fh # 1Eh } ver2
GXOR
      NEXT PICT {
# 1Fh # 1Eh } ver2
GXOR 1. 850.
      START
      NEXT PICT {
# 1Fh # 1Eh } ver2
GXOR PICT { # Dh # 2h
} TITLE 2. \->GROB GXOR
    \>>
  \>>
  TITLE
"ROOT LOCUS PLOTTER"
  VERsionRL
"VERSION 1.03"



  FIXKT
  \<< B SIZE EVAL KT
SIZE EVAL \-> x y
    \<<
      IF x y >
      THEN { } 1. x y
-
        START 0. +
        NEXT KT AL\->L
+ LA\->A 'KT' STO
      END
    \>>
  \>>





  PMUL
  \<< \-> F S
    \<< F SIZE S SIZE \->
Fs Ss
      \<< 2. Fs Ss +
        FOR x 0.
        NEXT Fs Ss +
1. - \->LIST 1. Fs
        FOR x 1. Ss
          FOR y DUP x
y + 1. - GET F x GET
S y GET * + x y + 1.
- SWAP PUT
          NEXT
        NEXT
      \>>
    \>>
  \>>
  TrangeLower 0.
  TrangeUpper 200.
  RESULTS
"\<)S OF ASSYMPTOTES
90
-90

LOC OF ASSYMPTOTES
-3

ALL BREAKPOINTS
(-.14292314779,0)
(-2.12214900918,-.700652497499)
(-2.12214900918,.700652497499)
(-4.30638941692,1.03334690119)
(-4.30638941692,-1.03334690119)

VALID BREAKPOINTS
NONE

\<)S OF DEPARTURE
(-2,1.41421356237)
GIVES
135.289377545

(-2,-1.41421356237)
GIVES
-135.289377545


"
  DOTEXT
  \<< FIXKT ""
"\<)S OF ASSYMPTOTES
"
+ AOA \-> TEMP
    \<< 1. TEMP SIZE
      FOR i TEMP i
GET FIXANGLE + "
" +
      NEXT
    \>> "
" +
"LOC OF ASSYMPTOTES
"
+ SA \-> TEMP
    \<< 1. TEMP SIZE
      FOR i TEMP i
GET + "
" +
      NEXT
    \>> "
" +
"ALL BREAKPOINTS
" +
BRP \-> TEMP
    \<< 1. TEMP SIZE
      FOR i TEMP i
GET + "
" +
      NEXT "
" +
"VALID BREAKPOINTS
"
+ TEMP RMBRKS DUP
      IF SIZE 0. ==
      THEN DROP
"NONE" 1. \->LIST
      END \-> TMP
      \<< 1. TMP SIZE
        FOR i TMP i
GET + "
" +
        NEXT
      \>>
    \>> "
" +
"\<)S OF DEPARTURE
" +
AODA + "
" + DUP
'RESULTS' STO
  \>>
  RMBRKS
  \<< DUP SIZE \->
BRKPNTS N
    \<< B AL\->L DUP SIZE
KT STLZ AL\->L DUP SIZE
\-> BL BN TL TN
      \<< { } 1. N
        FOR i 0. 1.
BN
          FOR j BL j
GET BRKPNTS i GET BN
j - ^ * +
          NEXT 0. 1.
TN
          FOR j TL j
GET BRKPNTS i GET TN
j - ^ * +
          NEXT / NEG
          IF DUP IM
ABS .001 <
          THEN
            IF DUP RE
DUP ABS ==
            THEN DROP
BRKPNTS i GET +
            ELSE DROP
            END
          ELSE DROP
          END
        NEXT
      \>>
    \>>
  \>>
  MDER
  \<< AL\->L DUP SIZE 1.
- 1. SWAP SUB DUP
SIZE \-> ROTS N
    \<< 1. N
      FOR i ROTS DUP
i GET N i - 1. + * i
SWAP PUT 'ROTS' STO
      NEXT ROTS
    \>>
  \>>
  BRP
  \<< B MDER AL\->L KT
AL\->L PMUL LA\->A B AL\->L
KT MDER AL\->L PMUL
LA\->A - STLZ PROOT
AL\->L
  \>>
  SA
  \<< 0. B STLZ PROOT
AL\->L NEG OBJ\-> 1. SWAP
    START +
    NEXT 0.
    IF KT STLZ DUP
SIZE EVAL 1. ==
    THEN DROP DROP
    ELSE PROOT AL\->L
OBJ\-> 1. SWAP
      START +
      NEXT +
    END NEG RE B STLZ
SIZE EVAL KT STLZ
SIZE EVAL -
    IF DUP 0. ==
    THEN DROP DROP
"NONE" 1. \->LIST
    ELSE / 1. \->LIST
    END
  \>>
  AROTS
  \<< B STLZ PROOT AL\->L
KT STLZ DUP
    IF SIZE EVAL 1.
==
    THEN DROP
    ELSE PROOT AL\->L +
    END
  \>>
  FIXANGLE
  \<<
    IF DUP 180. >
    THEN 360. -
FIXANGLE
    ELSE
      IF DUP -180. <
      THEN 360. +
FIXANGLE
      END
    END
  \>>
  AODA
  \<< B STLZ PROOT AL\->L
RERE DUP SIZE \-> ROTS
N
    \<<
      IF N 0. ==
      THEN "NONE
"
      ELSE "" 1. N
        FOR i "" ROTS
i GET DUP 'TP' STO +
"
GIVES
" + AOD + +
"

" +
        NEXT
      END
    \>>
  \>>
  RERE
  \<< \-> ROTS
    \<< ROTS OBJ\-> \-> n
      \<< { } 'ROTS'
STO 1. n
        FOR i
          IF DUP IM
ABS .00001 <
          THEN DROP
          ELSE ROTS
SWAP + 'ROTS' STO
          END
        NEXT ROTS
      \>>
    \>>
  \>>
  FAN
  \<< \-> ROTS
    \<< 0. 1. ROTS SIZE
      FOR i TP ROTS i
GET -
        IF DUP ABS
.01 <
        THEN DROP
        ELSE ARG +
        END
      NEXT
    \>>
  \>>
  TP
(-2.,-1.41421356237)
  AOD
  \<< B STLZ PROOT AL\->L
FAN NEG
    IF KT STLZ DUP
SIZE EVAL 1. ==
    THEN DROP
    ELSE PROOT AL\->L
FAN +
    END 180. +
FIXANGLE
  \>>
  AOA
  \<< B STLZ SIZE EVAL
1. - KT STLZ SIZE
EVAL 1. - - DUP
    IF 0. ==
    THEN DROP "NONE"
1. \->LIST
    ELSE DUP 180.
SWAP / SWAP 540. SWAP
/ 2. \->LIST
    END
  \>>
  AUS 1.
  AUTOS
  \<<
    IF AUS 1. ==
    THEN 0. 'AUS' STO
"OFF"
    ELSE 1. 'AUS' STO
"ON"
    END
  \>>
  FINDY
  \<< 0. 0. \-> ROTS MNY
MXY
    \<< 1. ROTS SIZE
      FOR i ROTS i
GET FIXR C\->R SWAP
DROP DUP
        IF MNY <
        THEN 'MNY'
STO
        ELSE DROP
        END
      NEXT MNY 4. -
MNY ABS 4. +
    \>>
  \>>
  FINDX
  \<< 0. 0. \-> ROTS MNX
MXX
    \<< 1. ROTS SIZE
      FOR i ROTS i
GET FIXR C\->R DROP DUP
DUP
        IF MNX <
        THEN 'MNX'
STO
        ELSE DROP
        END DUP
        IF MXX >
        THEN 'MXX'
STO
        ELSE DROP
        END
      NEXT MNX 2. -
MXX 2. +
    \>>
  \>>
  AUTOSIZE
  \<< B STLZ PROOT AL\->L
KT STLZ DUP
    IF SIZE EVAL 1.
==
    THEN DROP
    ELSE PROOT AL\->L +
    END DUP FINDX
XRNG FINDY YRNG
  \>>
  MKR
  \<< DUP TYPE
    IF 1. ==
    THEN OBJ\-> DROP
    END
  \>>
  FIXR
  \<< DUP TYPE
    IF 0. ==
    THEN 0. R\->C
    END
  \>>
  LORDER
  \<< 1. \-> ROTS
UNCHANGED
    \<<
      IF ROTS SIZE 1.
>
      THEN
        DO 1.
'UNCHANGED' STO 1.
ROTS SIZE 1. -
          FOR i
            IF ROTS i
GET ROTS i 1. + GET <
            THEN ROTS
i GET ROTS i 1. + GET
ROTS SWAP i SWAP PUT
SWAP i 1. + SWAP PUT
'ROTS' STO 0.
'UNCHANGED' STO
            END
          NEXT
        UNTIL
UNCHANGED 1. ==
        END
      END ROTS
    \>>
  \>>
  REIM
  \<< \-> ROTS
    \<< ROTS OBJ\-> \-> n
      \<< { } 'ROTS'
STO 1. n
        FOR i
          IF DUP IM
ABS .00001 >
          THEN DROP
          ELSE MKR
ROTS SWAP + 'ROTS'
STO
          END
        NEXT ROTS
      \>>
    \>>
  \>>
  RAXIS
  \<< B STLZ PROOT AL\->L
    IF KT STLZ SIZE
EVAL 1. ==
    THEN
    ELSE KT STLZ
PROOT AL\->L +
    END REIM LORDER \->
ROTS
    \<< ROTS SIZE 0. 0.
\-> n ISON LASTONE
      \<<
        IF n 0. \=/
        THEN 1. n
          FOR i ROTS
i GET
            IF ISON
1. ==
            THEN FIXR
LASTONE FIXR LINE 0.
'ISON' STO
            ELSE
'LASTONE' STO 1.
'ISON' STO
            END
          NEXT
          IF n 2. /
FP 0. \=/
          THEN PPAR
1. GET RE 0. R\->C
LASTONE FIXR LINE
          END
        END
      \>>
    \>>
  \>>
  STLZ
  \<< AL\->L \-> temp
    \<< temp SIZE \-> n
      \<< 1. n
        FOR i temp i
GET
          IF 0. ==
          THEN temp
2. n i - 1. + SUB
'temp' STO i 1. - 'i'
STO
          ELSE 10.
'i' STO
          END
        NEXT temp
LA\->A
      \>>
    \>>
  \>>
  AL\->L
  \<< DUP TYPE
    IF 5. \=/
    THEN OBJ\-> OBJ\->
DROP \->LIST
    END
  \>>
  PLZER
  \<< STLZ DUP SIZE
OBJ\-> DROP
    IF 1. ==
    THEN DROP
    ELSE PROOT OBJ\->
OBJ\-> DROP 1. SWAP
      FOR i FIXP PICT
SWAP C\->PX OBJ\-> DROP
# 2h - SWAP # 2h -
SWAP 2. \->LIST CIRCI
GOR
      NEXT
    END
  \>>



  RLOCUSFINDER
  \<< FIXKT
    IF AUS 1. ==
    THEN AUTOSIZE
    END { # 0h # 0h }
PVIEW B SIZE EVAL \-> n
    

      \<< B PLPLS KT
PLZER RAXIS
TrangeLower
TrangeUpper
      FOR k B KT k *
+ PROOT OBJ\-> DROP 2.
n
        START FIXP
PIXON
        NEXT k Speed
* \GeN
      STEP PICTURE
    \>>
  \>>
  FIXP
  \<< DUP TYPE
    IF 0. ==
    THEN 0. R\->C
    END
  \>>
  \GeN
  \<< \-> i
    \<<
      IF i L1 <
      THEN S1
      ELSE
        IF i L2 <
        THEN S2
        ELSE
          IF i L3 <
          THEN S3
          ELSE
            IF i L4 <
            THEN S4
            ELSE
              IF i L5
<
              THEN S5
              ELSE S6
              END
            END
          END
        END
      END
    \>>
  \>>




  CST { ERASE
ABOUTrlocus
RLOCUSFINDER B KT {
"NUMBERS" DOTEXT }
AUTOS Spd\|^ Spd\|v Speed
XRNG YRNG PMUL LA\->A
PROOT OBJ\-> { "RECALL"
RESULTS } "" DAMP
SQUIG PLSQ }
  LA\->A
  \<< DUP TYPE
    IF 3. \=/
    THEN OBJ\-> \->ARRY
    END
  \>>
  PLPLS
  \<< STLZ PROOT OBJ\->
OBJ\-> DROP 1. SWAP
    FOR i FIXP PICT
SWAP C\->PX OBJ\-> DROP
# 2h - SWAP # 2h -
SWAP 2. \->LIST CROSSI
GOR
    NEXT
  \>>
  Spd\|v
  \<< Speed 1. -
'Speed' STO
  \>>
  Spd\|^
  \<< Speed 1. +
'Speed' STO
  \>>
  CIRCI
GROB 5 5 F1111111F1
  CROSSI
GROB 5 5 11A040A011
  BOXI
GROB 3 3 707070
  KT
[ 0. 0. 1. 5. 4. ]
  B
[ 1. 11. 44. 82. 60. ]
  Speed 5.
  PPAR {
(-7.,-5.41421356237)
(2.,5.41421356237) X
0. (0.,0.) FUNCTION Y
}
  S2 .5
  S3 1.
  S4 2.
  S5 5.
  S6 10.
  S1 .1
  L5 100.
  L4 50.
  L3 15.
  L2 5.
  L1 1.



END