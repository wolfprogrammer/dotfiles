//------------------  control1.sci -------------------------------
//
//	  Script para plotar a as respostas de sistemas de segunda ordem,
//	normalizados, ou seja ,de frequência natural unitária
//  ao degrau unitário.
//
//       	    _________
//	R(s)  ===>>|  G(s)	|===> Y(s)
//	       	   |________|
//
//		G(s)=wn^2/(s^2+2*z**s*wn+wn^2)
//
//
//		wn: Frequência natural - Natural frenquency
//		z: Leia-se zeta, fator de amortecimento , damping factor
//


//---------------- Ações iniciais ----------------------//
clc();										// Apaga mensagens de texto
clf();										// Apaga ecrã de gráficos
clear();									// Apaga todos valores
xgrid();									// Põem grid/grade de coordenadas



wn=1;
z_=[0.00001 0.1 0.5  0.7 1 2 5];				// Valores de z(zeta), damping ratio
t=[0:0.05:15];								// Intervalo de tempo de simulação

colors=["r" "g" "b" "c" "m" "k" "y"]		// Cores dos gráficos

s=%s;  										// Variável complexa



//=============================================================//



for i=1:7

		G_=wn^2/(s^2+2*z_(i)*wn*s+wn^2);	// Objetos algébricos
		G=syslin('c',G_);				    // Função de transferência
		y=csim('step',t,G);					// Determina vetor resposta ao impulso

	
//		// Vetores y e t em ordem reversa
//		for	j=1:length(y);
//			yrev(j)=y($-j+1);
//			trev(j)=t($-j+1);
//		end

		
		yy(:,i)=y';

		printf("zeta=%f e os pólos de G são",z_(i));
		roots(G.den)
	
		[ypeak,ind]=max(y);					// Determina o máximo valor
											//do vetor y e seu indice
	
		//	Cálculo do settling Rise time , por interpolação do vetor y e t
		//
		// Critério de 10% a 90% do valor final  do valor final
		tr2=interp1(y,t,0.9);
		tr1=interp1(y,t,0.1);
		tr=tr2-tr1;
		printf("\n tr=%f sec (por interpolação) , critério 10 a 90 pcnt do valor final \n",tr);


		// Cálculo do settling time com tolerância de 3% do valor final
		//
		//
		ts=4/(wn*z_(i));
		printf("\n ts=%f sec (por interpolação) , critério 2 pcnt do valor final \n",ts);




		OSS=(ypeak-1)*100;
		tp= t(ind);							// Tempo de pico , peak time
		if OSS>0 
			printf("OS %f porcento , Tp=%f sec ",OSS,tp);
		end

		
		printf("\n\n----------------------------\n");

		plot(t,y,colors(i));							// Plota as respostas
end

xtitle(" 2nd order system time response","t sec /time","y");			//Títuleo do gráfico

legend("z=0.00001","z=0.1","z=0.5","z=0.7","z=1","z=2","z=5")

xbasimp(0,'graph1.eps');
