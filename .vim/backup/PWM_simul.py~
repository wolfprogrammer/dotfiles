# PWM calculator

#from scipy import *
#from numpy import *
from pylab import *

"""
 PWM: Frquency Selection for DC motor control

 Rule of thumb: A suitable value should be bentwheen 4 KHZ and 20 KHZ

 1. Reistor heating. Faster means hotter.
 2. Mechanical resonances of the system. Avoid these frequencies.
 3. Electrical time constants. The motor current should come to full value in a fraction of the pulse width. 
 4. Acoustics. Will any sound be generated loud enough for people to hear and be irritated from it.
""" 

PWM_freq= 5e3	     # PWM frequency in HZ = 10 KHZ
timer_tick=0.01e-3   # 0.1 ms timer interrupt
PWM_D=30          # percent PWM duty  cycle 

PWM_period=1.0/PWM_freq
PWM_MAX_count=PWM_period/timer_tick    # Maximum PWM count value = PWM_Period
PWM_Ton_count=PWM_D/100.0*PWM_MAX_count

print " RESULTS OF CALCULATION \n"
print "PWM_freq (HZ)=%.2f" % PWM_freq
print "timer_tick=%f s = %f us Timer interrupt rate" % (timer_tick,timer_tick*1e6)
print "PWM duty cycle PWM_D=%.2f %%" % PWM_D
print "PWM_period =%.2f s = %.2f us"  % (PWM_period,PWM_period*1e6)
print "PWM_MAX_count=%d" % PWM_MAX_count
print "PWM_Ton_count=%d" % PWM_Ton_count


PWM_D=linspace(0,100,100)
PWM_Ton_count=PWM_D/100*PWM_MAX_count

plot(PWM_D,PWM_Ton_count)
xlabel("PWM duty cycle %")
ylabel("PWM Ton counts")
title("PWM duty cycle X PWM Ton counts")
grid()

OFF=0
ON=1
PWM_cycles=3 			# PWM cycle simulatiion
Tmax=PWM_cycles*PWM_period      # Max time simulation

t=arange(0,Tmax,timer_tick)
PWM_count=0
count_trace=[]
PWM_out=[]
PWM_D=25.0				# 20% duty cycle
PWM_Ton_count=PWM_D/100*PWM_MAX_count   # 

for tt in t:
	if PWM_count<=PWM_Ton_count:
		out=ON
	else:
		out=OFF

	if PWM_count>=PWM_MAX_count:
		PWM_count=0;

	count_trace.append(PWM_count)
	
	PWM_count+=1			# Increment counter
	PWM_out.append(out)
	

figure()
PWM_out_scaled=PWM_MAX_count/4*array(PWM_out)
t=1e6*t					# Time in us

plot(t,count_trace,label="PWM_trace")
plot(t,PWM_out_scaled,label="PWM output")
legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
axhline(y=PWM_Ton_count,color='r')
title("PWM output waveforms\n Duty Cycle=%.2f %%" % PWM_D)
xlabel("Time us")
ylabel("PWM count")

show()
