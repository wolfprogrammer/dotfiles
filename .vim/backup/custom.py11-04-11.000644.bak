#!/usr/bin/env python



#		Modificado por Caio Rodrigues Soares Silva
#
# 
#
#

#import os,sys
import subprocess as sbb
import curses

##
## Variables one might like to configure
##
URXVT="urxvtc  -sl 1000 -sr -bg black -fg white -fn \"9x15,xft:Droid Serif:pixelsize=15\" -e "
MONKEY="192.168.1.4"
httpmonkey="firefox http://192.168.1.4/"
mountmonkey="mkdir -p /tmp/mount && sshfs monkey@192.168.1.4:/home/monkey /tmp/mount &&  pcmanfm /tmp/mount"

programs = ["montar monkey",mountmonkey,"remote dir","pcmanfm /tmp/mount","WIKI",httpmonkey+"mediawiki","httpMonkey","firefox http://192.168.1.4","8051ide", "mcu8051ide", "sshmonkey", URXVT+" ssh monkey@192.168.1.4", "WXmaxima", "wxmaxima", "Firefox", "swiftfox",\
                "HOME", "pcmanfm","TMP","pcmanfm /tmp","Screen",URXVT+ "screen", "Thunar", "thunar", \
				"google", "firefox http://www.google.co.uk", "Thunderbird", "thunderbird", "SMplayer", "smplayer"]
highlight = 4
on_screen = 7

##
## Functions
##

# Gets a list of strings, figures out the middle one
# and highlights it. Draws strings on screen.
def drawStrings(strings):
    length = len(strings)
    middle = (length - 1)/2
    for num in range(length):
        addString(strings[num], middle, num, length)
    stdscr.refresh()

def addString(string, middle, iter_step, iter_max):
    if iter_step < iter_max:
        string = string + "\n"
    if iter_step == middle:
        stdscr.addstr(iter_step + 1, 1, string, curses.A_REVERSE)
    else:
        stdscr.addstr(iter_step + 1, 1, string)

# Returns a list of strings to draw on screen. The
# strings chosen are centered around position.
def listStrings(strings, position, on_screen):
    length = len(strings)
    low = (on_screen - 1)/2
    start = position - low
    str = []
    for num in range(start, start + on_screen):
        str = str + [strings[num % length]]
    return str        

##
## Start doing stuff
##

names = programs[::2]
longest = max(map(lambda x: len(x), names))

# Start our screen
stdscr=curses.initscr()

# Enable noecho and keyboard input
curses.curs_set(0)
curses.noecho()
curses.cbreak()
stdscr.keypad(1)

# Display strings
drawStrings(listStrings(names, highlight, on_screen))


while True:
	# Wait for response
	num_progs = len(names)
	low = (on_screen - 1)/2
	while 1:
		c = stdscr.getch()
		if c == ord("q") or c == 27:  # 27 = "Escape"
			break
		elif c == curses.KEY_DOWN:
			highlight = (highlight + 1)%num_progs
		elif c == curses.KEY_UP:
			highlight = (highlight - 1)%num_progs
		elif c == curses.KEY_NPAGE:
			highlight = (highlight + low)%num_progs
		elif c == curses.KEY_PPAGE:
			highlight = (highlight - low)%num_progs
		elif c == 10:   # actually "Enter", but hey 
			sbb.call(programs[2*highlight + 1]+" &",shell=True) 
			break
		drawStrings(listStrings(names, highlight, on_screen))

# Close the program
curses.nocbreak()
stdscr.keypad(0)
curses.echo()
curses.endwin()
sbb.call("reset")
#sys.exit()
