#  Objetivo construir um solver(solucionador) de equacoes
#

import re
import numpy as np
import pdb # modulo que faz debug

def solve(equation,inputs,varr,guess):
	"""
	Solve numerically a  equations , where:

	Input
		. equation: Is a string representig the equation 
		. inpus: Is a list [[known_vars],[values]]
		. varr: Is the unknown variable
		. guess: It is initial value
	"""

	lside_pattern=re.compile("=.+$")   # left side of equation
	rside_pattern=re.compile(".+=")    # left side of equation
	variable_pattern=re.compile("[a-zA-Z][a-zA-Z0-9]*")


	lside=lside_pattern.findall(equation) 	; print  lside
	rside=rside_pattern.findall(equation)   ; print  rside
	varlist=variable_pattern.findall(equation)
        #[1]
	# Remove strings from the list 
	lside=lside[0]	
	rside=rside[0]
	print "[1] lside=",lside
	print "[1] rside=",rside

        # [2]
	lside=lside[1:]   # removes the '=' character	
	rside=rside[:-1]  # thes same action
	print "[2] lside=",lside
	print "[2] rside=",rside

	# [3]
	# error=right_side -right_side must be zero when the equation is solved
	error_equation="(%s)-(%s)" % (rside,lside)
	print "[3] error_equation=",error_equation 

        # [4]
	# Get the known variables  and its values
	knownvars=inputs[0]  ; print "[4] knownvars",knownvars 
	knownvals=inputs[1]  ; print "[4] knownvals",knownvals

	# [5]
        # Declare variables inside this function
	print "section [5]"

	# Debug breakpoint
        pdb.set_trace()

	for v in knownvars:
		val=knownvals[knownvars.index(v)]
		exec("%s=%f" % (v,val))
		print("%s=%s" % (v,eval(v)))
		exec("%s=var(\'%s\')" % (val,val)) 
	
	#[6]
	print "section [6]"
	# Initial guess
	exec("%s=%f" % (varr,guess))
	print("%s=%s" % (varr,eval(varr)))

	err0=eval(error_equation)
	print err0


	




equa ="x**2+x*y+4=5*r/x"
inputs=[['x','y'],[34.56,78.5]]
varr='r'
guess=3.5

print "equa=",equa
print "intpus=",inputs
print "varr=",varr
print "guess=",guess


solve(equa,inputs,varr,guess)
