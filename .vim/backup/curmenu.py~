#!/usr/bin/env python
#
#	From
#       Modified b

import os,sys
import curses
from subprocess import Popen as popen # Get the external command in background

##
## Variables one might like to configure
##

# Run cli applications , like mutt
#
def cmd(program): #,timeout="&& sleep 3m"):
	cli="lxterminal -e \" %s \" "  % program
	#cli=cli+timeout
	return cli

#popen("lxterminal -e \"screen -S run\"",shell=True)


programs =                   						\
[               							\
"Pcmanfm -default file manager", "pcmanfm --no-desktop", 		\
"Pcmanfm modified", "pcmanfm-mod --no-desktop",        		 	\
"Editor Gvim vim-gtl", "gvim", 						\
"Opera Browser", "opera",               				\
"Firefox", "firefox",	       						\
"Scan partitions", cmd("sudo fdisk -l"),     				\
"Screen", "xterm -e screen",   						\
"Gmail caiorss -mut email", cmd("mutt -F ~/.gmail2"),      	      	\
"Ipython Matlab repacement eng-profile",cmd("iphon --progile=eng"),	\
]

highlight = 6 
on_screen = 14

##
## Functions
##

# Gets a list of strings, figures out the middle one
# and highlights it. Draws strings on screen.
def drawStrings(strings):
    length = len(strings)
    middle = (length - 1)/2
    for num in range(length):
        addString(strings[num], middle, num, length)
    stdscr.refresh()

def addString(string, middle, iter_step, iter_max):
    if iter_step < iter_max:
        string = string + "\n"
    if iter_step == middle:
        stdscr.addstr(iter_step + 1, 1, string, curses.A_REVERSE)
    else:
        stdscr.addstr(iter_step + 1, 1, string)

# Returns a list of strings to draw on screen. The
# strings chosen are centered around position.
def listStrings(strings, position, on_screen):
    length = len(strings)
    low = (on_screen - 1)/2
    start = position - low
    str = []
    for num in range(start, start + on_screen):
        str = str + [strings[num % length]]
    return str        

##
## Start doing stuff
##

names = programs[::2]
longest = max(map(lambda x: len(x), names))

# Start our screen
stdscr=curses.initscr()

# Enable noecho and keyboard input
curses.curs_set(0)
curses.noecho()
curses.cbreak()
stdscr.keypad(1)

# Display strings
drawStrings(listStrings(names, highlight, on_screen))

# Wait for response
num_progs = len(names)
low = (on_screen - 1)/2
while 1:
    c = stdscr.getch()
    # Ends the program
    if c == ord("q") or c == 27:  # 27 = "Escape"
        break
    elif c == curses.KEY_DOWN:
        highlight = (highlight + 1)%num_progs
    elif c == curses.KEY_UP:
        highlight = (highlight - 1)%num_progs
    elif c == curses.KEY_NPAGE:
        highlight = (highlight + low)%num_progs
    elif c == curses.KEY_PPAGE:
        highlight = (highlight - low)%num_progs
    elif c == 10:   # actually "Enter", but hey
	#----------------------------------------"
	# Here the command to call the external program
        popen(programs[2*highlight + 1],shell=True)
        #break # It's break the ethenal loop
    drawStrings(listStrings(names, highlight, on_screen))


# Fix the displey messing
os.system("reset")
# Close the program
