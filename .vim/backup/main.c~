/*********************************************************************
 *                Microchip USB C18 Firmware Version 1.0
 *********************************************************************
 * Processor:       PIC18
 * Compiler:        C18 2.30.01+
 ********************************************************************/


//#pragma romdata configuration = 0x0300000
//#pragma rom char config[] = { 0x20 , 0x0E  , 0x20 , 0x00 , 0xFF , 0X81 , 0x80 , 0xff , 0xff  , 0xff  , 0xff , 0xff  , 0xff  }   



/** I N C L U D E S **********************************************************/
#include "system\typedefs.h"                        // Required
#include "system\usb\usb.h"                         // Required
#include "io_cfg.h"                                 // Required
#include "system\usb\usb_compile_time_validation.h" // Optional
#include "user\user.h"                              // Modifiable


#pragma romdata CONFIG1L = 0x300000 
const rom unsigned char config1L = 0x20; 

#pragma romdata CONFIG1H = 0x300001 
const rom unsigned char config1H = 0x0E; 

#pragma romdata CONFIG2L = 0x300002 
const rom unsigned char config2L = 0x20; 

#pragma romdata CONFIG2H = 0x300003 
const rom unsigned char config2H = 0x00; 

#pragma romdata CONFIG3H = 0x300005 
const rom unsigned char config3H = 0x81; 

#pragma romdata CONFIG4L = 0x300006 
const rom unsigned char config4L = 0x80; 

#ifdef __DEBUG
#undef __DEBUG
#endif


/*
code char at 0x300000 CONFIG1L = 0x20; // USBDIV=1, CPUDIV=00, PLLDIV = 000

code char at 0x300001 CONFIG1H = 0x0E; // IESO=0, FCMEN=0, FOSC = 1110

code char at 0x300002 CONFIG2L = 0x20; // Brown out off, PWRT On

code char at 0x300003 CONFIG2H = 0x00; // WDT off

code char at 0x300004 CONFIG3L = 0xff; // Unused configuration bits

code char at 0x300005 CONFIG3H = 0x81; // Yes MCLR, PORTB digital, CCP2 - RC1

code char at 0x300006 CONFIG4L = 0x80; // ICD off, ext off, LVP off, stk ovr off

code char at 0x300007 CONFIG4H = 0xff; // Unused configuration bits

code char at 0x300008 CONFIG5L = 0xff; // No code read protection

code char at 0x300009 CONFIG5H = 0xff; // No data/boot read protection

code char at 0x30000A CONFIG6L = 0xff; // No code write protection

code char at 0x30000B CONFIG6H = 0xff; // No data/boot/table protection

code char at 0x30000C CONFIG7L = 0xff; // No table read protection

code char at 0x30000D CONFIG7H = 0xff; // No boot table protection

*/
//fusebity

// CONFIG1L

//#pragma config CPUDIV = OSC1_PLL2







/** V A R I A B L E S ********************************************************/

/** P R I V A T E  P R O T O T Y P E S ***************************************/
static void InitializeSystem(void);
void USBTasks(void);

/** D E C L A R A T I O N S **************************************************/

/******************************************************************************
 * Function:        void main(void)
 * PreCondition:    None
 * Input:           None
 * Output:          None
 * Side Effects:    None
 * Overview:        Main program entry point.
 * Note:            None
 *****************************************************************************/
void main(void)
{
    InitializeSystem();
    while(1)
    {
        USBTasks();         // USB Tasks
        ProcessIO();        // See user\user.c & .h
    }//end while
}//end main

/******************************************************************************
 * Function:        static void InitializeSystem(void)
 * PreCondition:    None
 * Input:           None
 * Output:          None
 * Side Effects:    None
 * Overview:        InitializeSystem is a centralize initialization routine.
 *                  All required USB initialization routines are called from
 *                  here.
 *                  User application initialization routine should also be
 *                  called from here.                  
 * Note:            None
 *****************************************************************************/
static void InitializeSystem(void)
{
    ADCON1 |= 0x0F;                 // Default all pins to digital
    //ADCON1 |= 0x0E;		//jeden pin analogowy						
    #if defined(USE_USB_BUS_SENSE_IO)   //(nie jest zdefiniowane)
    tris_usb_bus_sense = INPUT_PIN; // See io_cfg.h
    #endif
    
    #if defined(USE_SELF_POWER_SENSE_IO)
    tris_self_power = INPUT_PIN;
    #endif
    
    mInitializeUSBDriver();         // See usbdrv.h
    
    UserInit();                     // See user.c & .h

}//end InitializeSystem

/******************************************************************************
 * Function:        void USBTasks(void)
 * PreCondition:    InitializeSystem has been called.
 * Input:           None
 * Output:          None
 * Side Effects:    None
 * Overview:        Service loop for USB tasks.
 * Note:            None
 *****************************************************************************/
void USBTasks(void)
{
    /*
     * Servicing Hardware
     */
	//definicje funkcji: usbdrv.c
    USBCheckBusStatus();                    // Must use polling method
    if(UCFGbits.UTEYE!=1)
        USBDriverService();                 // Interrupt or polling method
    
    #if defined(USB_USE_CDC)
    CDCTxService();
    #endif

}// end USBTasks

/** EOF main.c ***************************************************************/
