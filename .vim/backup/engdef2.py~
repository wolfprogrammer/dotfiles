#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pylab import *
ion()

#############################################
#    Fatores de conversao de unidades       #
#############################################

mm2in=1/25.4

# rpm para rad/s
rpm2rads=pi/30.0

# rad para rad/s
rads2rpm=30.0/pi

d2r=pi/180.0
r2d=180.0/pi


#  Calcula seno com argumento em graus
#
def sind(x):
	return sin(deg2rad(x))

#  Cálcula coseno com ângulo em graus
#
def cosd(x):
	return cos(deg2rad(x))

def tand(x):
	return tan(deg2rad(x))
 
#  Converte de coordenadas polares para retangulares
# entrada:  [raio,ângulo_graus]
# saida:    [x,y]
#
def pol2rec(pol):
	r=pol[0]
	angle=pol[1]
	rec= [r*cosd(angle) , r*sind(angle)]
	rec=array(rec) # Transforma em array do numpy
	return rec


#
#
#


def printcalc(varname,values,fmt="%.4f"):
	for  varr in varname:
		idx=varname.index(varr)
		print varr+"\t=",fmt % values[idx]


#############################################################
#		Funções para cálculos de vigas
#


def _stp(x,a):
	"""
	Degrau unitário 
        Entrada x,a

	Se x<a retorna 0
	Se x>a retorna 1

	"""
	if x>a:	return 1
	else:  	return 0 


def _stpn(x,a,n):
 	if x>a:
		k=1.0;
	else:
		k=0.0;
	return k*(x-a)**n
 

def _urp(x,a):
	if x>a:
		k=1.0;
	else:
		k=0.0;
	return k*(x-a)


stp=vectorize(_stp)
urp=vectorize(_urp)
stpn=vectorize(_stpn)


def shears(loads,xload,x):
	"""
	Calcula o esforco cortante para uma lista de cargas concentradas P
	no sentido positivo do eixo y por exemplo

	load=[P1,P2,P3...,Pn]    :(lista) Valores das cargas concentradas
	xload=[x1,x2,x3...,xn]   :(lista) Posição das cargas concentradas
	x			 :(array) Posição em que será calculado o esforco cortante	
	"""
	loads=array(loads)
	xload=array(xload)
	

	V=0.0
	ind=0


	for P in loads :
		xl=xload[ind]
		ind=ind+1

		V=V-P*stp(x,xl)
	
	return V


def bending(loads,xload,x):
	"""
	Calcula o momento fletor para uma lista de cargas concentradas P
	no sentido positivo do eixo y por exemplo

	load=[P1,P2,P3...,Pn]    :(lista) Valores das cargas concentradas
	xload=[x1,x2,x3...,xn]   :(lista) Posição das cargas concentradas
	x			 :(array) Posição em que será calculado o esforco cortante	
	"""
	loads=array(loads)
	xload=array(xload)
	

	M=0.0
	ind=0


	for P in loads :
		xl=xload[ind]
		ind=ind+1

		M=M+P*urp(x,xl)
	
	return M


