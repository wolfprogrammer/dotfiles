/*
 * =====================================================================================
 *
 *       Filename:  delay.c
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  01/29/2011 04:23:34 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (), 
 *        Company:  
 *
 * =====================================================================================
 */

#include "pic16f877a.h"
#include "default.h"
#include "delay.h"


//
//	Delay 1 one instrucyion cycle * x
//
extern void delay1TCYx(u8 x){	
	while(--x);
}


//
//	Delay in multiple of 10 instruction cycle
//
extern void delay10TCYx(u8 x){
		u8 i=10;
		while(--i) delay1TCYx(x);
}



//	Delay in multiple of 100 instruction cycle
//
extern void delay100TCYx(u8 x){
		u8 i=100;
		while(--i) delay1TCYx(x); // Termina quando i for 0
}



//
//	Delay in multiple of 1000 instruction cycle
//
extern void delay1KTCYx(u8 x){
		u8 i=100;
		while(--i) delay10TCYx(x); // Termina quando i for 0
}

//
//	Delay in multiple of 10000
//
extern void delay10KTCYx(u8 x){
		u8 i=10;
		while(--i) delay1KTCYx(x); // Termina quando i for 0
}



//
//	timer0delay()
//
extern void timer0delay(u8 t0ini){
		T0IF=0;
		TMR0=t0ini;
		while(T0IF);		//Wait T0IF=0, timer0 overflow
}




/*----------------------------------
        setup_tmr1

  Rotina para iniciar o timer1 com um dado
prescaler

arg: prescaler

O argumentos da função podem ser:

  tmr1_1b1  
  tmr1_1b2    
  tmr1_1b4
  tmr1_1b8

-----------------------------------*/


    void setup_tmr1(u8 prescaler){
    
        TMR1ON=0 ;          // Turn off TIMER1
        T1OSCEN=0;          // Disable Internal RC oscillator
        TMR1CS=0;           // Use Fosc/4 , external clock
        T1CON|=prescaler;   //
        TMR1ON=1;           // Start Timer1

    }



/*----------------------------------
            delay_tmr1()

 Delay com timer1(16 bits)
  
  O tempo de delay é de: 
  

  delay=ticks*tmr1*prescaler_tmr1*Tins
  Tins=FOSC/4
-----------------------------------*/




extern void delay_tmr1(u16 ticks){

    TMR1H=0;

    //Espera um periódo de ticks*presc*Tosc/4
    while((hbyte(ticks)!=TMR1L)|(lbyte(ticks)!=TMR1H)){}
   

}




        /***************************************************
         *      Rotinas de delays específicas para clocks  *
         *                                                 *
         **************************************************/

            /*--------------------------------
             *         CLOCK 4MHZ            *
             *                               *
             *  Rotinas para clock 4 MHZ     *
             *-------------------------------*/
//#ifdef clock4mhz
//#warning "Gravação para clock 4MHZ"

//				delay1s()
//
//	Espera 1 minuto
//
//	Memória de cálculo
//
//	   0_____	 Tc
//		|	|	|
//		|	|___|
//
//	Tc=4/Fclock=4/(4 MHZ)= 1us  : Tempo de instrução
//	Td=PRESC*Tc*TMR0*N=32*1us*250*125= 1 sec
//
extern void delay1s(void){

		u8 count1;
		OPTION_REG=tmr0_1b32;	//Clock 1 por 32 , prescaler de 32 
		TMR0=0;					//Inicia o TMR0

		for(count1=0;count1<125;count1++) while(TMR0<250);	

}


extern void delay10s(void){		//Base do tempo 1 segundo
		u8 countp;
			for(countp=0;countp<10;countp++) delay1s();

}


extern void delay_s(u8 countp){
		u8 i;
		for(i=0;i<countp;i++) delay1s();
	

}


extern void delay_ms(u8 N){

		u8 count1;
		OPTION_REG=tmr0_1b8;	//Clock 1 por 32 , prescaler de 32 
		TMR0=0;					//Inicia o TMR0

		for(count1=0;count1<N;count1++) while(TMR0<125);	


}


extern void delay_us(u8 N){
		
		u8 count1;
		for(count1=0;count1<N;count1++);
}

// #endif


                /*--------------------------------
                 *         CLOCK 10MHZ           *
                 *                               *
                 *  Rotinas para clock 10 MHZ    *
                 *-------------------------------*/
#ifdef clock10mhz


#endif




                /*--------------------------------
                 *         CLOCK 20MHZ           *
                 *                               *
                 *  Rotinas para clock 20 MHZ    *
                 *-------------------------------*/
#ifdef clock20mhz


#endif
